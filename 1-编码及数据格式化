# !/usr/bin/env python3
# -*- coding:utf-8 -*-
# 第一行：告知Linux/OS X系统，这是一个python可执行程序，windows系统会忽略该注释。
# 第二行：按照utf-8编码读取源码。源码包含中文时使用，否则可能出现乱码。
# 注意：申明了utf-8编码并不意味着.py文件就是utf-8编码的，同时要确保文本编辑器正在使用UTF-8 without BOM编码。

# ascii编码，只包括了大小写英文字母、数字和一些符号，不支持中文。一般使用1个字节。

# unicode编码，将所有语言统一编码。一般使用两个字节表示一个字符，当用到生僻字符时，使用4个字节。
# 由于ascii编码字母时使用一个字节，unicode编码字母时使用两个字节，所以将ascii编码的字母用unicode编码时，只要在前面补0就可以了。
# 例如：A的ascii编码为65，二进制为：01000001；则A的unicode编码的二进制为：00000000 01000001 。

# utf-8编码，可变长编码，将一个unicode字符根据不同的数字大小编码成1～6个字节。
# 出现原因：节省存储空间。例如一篇全英文的文本，使用unicode编码比ascii编码需要多一倍的存储空间。
# 常用的英文字母被编码成1个字节，汉字通常为3个字节，生僻字符使用4～6个字节。
# 由于常用的英文字母被编码成1个字节，所以ascii编码可以被看成是UTF-8编码的一部分。

# 将单个字符转换为utf-8编码，使用ord()函数。
print(ord('A'), ord('a'))
print(ord('你'), ord('好'))

# 将utf-8编码转换为对应字符，使用chr()函数。
print(chr(65), chr(97))
print(chr(20320), chr(22909))

# “A”的utf-8编码为65，十六进制为：41，“a”的utf-8编码为97，十六进制为：61。
# “中”的utf-8编码为20320，十六进制为：4f60，“文”的utf-8编码为22909，十六进制为：597d。
# 可以用字符的utf-8编码的十六进制表示字符。
print('\u0041', '\u0061', '\u0041\u0061')
print('\u4f60', '\u597d', '\u4f60\u597d')
print('-----------------------------------------------------------------001')

# 字符串的类型是str，以unicode编码，在内存中以Unicode表示，即字符串支持多语言。一个字符对应若干个字节（byte）。
# 字符串在网络上传输或保存到磁盘时，需要转换为以字节为单位的字节流（bytes）。
# bytes类型的数据用带b前缀的单引号或双引号表示，bytes的每个字符都只占用一个字节。
# 例如：'abc'是字符串str，b'abc'是bytes。
print('abc', b'abc')

# 将str通过编码（例如ascii、utf-8等编码方式）转换为bytes，使用encode()方法。
print('abc'.encode('ascii'), 'abc'.encode('utf-8'))
print('你好'.encode('utf-8'))
print('你好'.encode('gb2312'))
# 纯英文的str可以用ascii编码为bytes，内容与utf-8是一样的。
# 含有中文的str可以用utf-8编码为bytes，但无法用ascii编码，因为ascii编码不支持中文，python会报错。
# print('你好'.encode('ascii'))

# 将bytes通过编码（例如ascii、utf-8等编码方式）转换为str，使用decode()方法。
print(b'abc'.decode('ascii'), b'abc'.decode('utf-8'))
print(b'\xe4\xbd\xa0\xe5\xa5\xbd'.decode('utf-8'))
print(b'\xc4\xe3\xba\xc3'.decode('gb2312'))

# 若bytes中包含无法解码的字节，decode()方法会报错。所以只有小部分无效字节时，可传入errors='ignore'忽略错误的字节。
# print(b'\xe4\xbd\xa0\xe5\xa5\xbd\xab'.decode('utf-8'))
print(b'\xe4\xbd\xa0\xe5\xa5\xbd\xab'.decode('utf-8', errors='ignore'))
print('-----------------------------------------------------------------002')

# len()函数，用在str上时，计算字符数；用在bytes上时，计算字节数。
print(len('abc'), len(b'abc'))
print(len('你好'), len(b'\xe4\xbd\xa0\xe5\xa5\xbd'))
print(len('你好'.encode('utf-8')), len(b'\xe4\xbd\xa0\xe5\xa5\xbd'.decode('utf-8')))
print('-----------------------------------------------------------------003')

# 数据格式化展示，使用%实现。
# 用于字符串内部，例如：%s表示用字符串替换，%d表示用整数替换。
# 有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。若只有一个%?，括号可省略。
# 常见的占位符有：
# 占位符 	替换内容      备注
#  %d 	      整数
#  %f 	     浮点数       %.1f：保留一位小数，%.2f：保留一位小数，依次类推。
#  %s 	     字符串
#  %x 	  十六进制整数
# 当不确定应该用哪个占位符时，就使用%s，它会把任何数据类型转换为字符。
print('hello %s,you need to pay %f %s' % ('jack', 8.88, 'dollars'))
print('1位小数：%.1f，2位小数：%.2f，3位小数：%.3f' % (1.5678, 1.5678, 1.5678))

# 当字符串中的%是一个普通字符时，使用%转义，即用%%来表示一个% 。注意：不是使用“\”转义。
print('百分比是：%.2f%%' % 5.6)

# 数据格式化展示，使用format()方法。
# 用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多。
print('hello {0}，你这月的房租收入占比为：{1:.2f}%'.format('jack', 30.567))


print('-----------------------------------------------------------------004')




